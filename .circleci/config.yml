version: 2.1

orbs:
  docker: circleci/docker@1.4.0
  buildx: sensu/docker-buildx@1.0.0

parameters:
  target_workflow:
    type: string
    default: ""

commands:
  create-target-directory:
    steps:
      - run:
          name: Create target directory
          command: mkdir -pv target
  setenv-from-file:
    parameters:
      variable-name:
        type: env_var_name
      path:
        type: string
    steps:
      - run:
          name: Set << parameters.variable-name >> environment variable
          command: >
            echo "export
            << parameters.variable-name >>=$(cat << parameters.path >> | tr -d
            '\n')" >> $BASH_ENV
      - run:
          name: Ensure << parameters.variable-name >> is set
          command: |
            if [ "x${<< parameters.variable-name >>}" = "x" ]; then
            echo "<< parameters.variable-name >> is empty"
            exit 1
            fi
      - run:
          name: Print << parameters.variable-name >>
          command: echo $<< parameters.variable-name >>
  setenv-target-workflow:
    parameters:
      branch:
        type: string
        default: "main"
    steps:
      - when:
          condition: << pipeline.parameters.target_workflow >>
          steps:
            - run:
                name: Set TARGET_WORKFLOW environment variable
                command: >
                  echo 'export
                  TARGET_WORKFLOW=<< pipeline.parameters.target_workflow >>'
                  >> $BASH_ENV
      - when:
          condition:
            not: << pipeline.parameters.target_workflow >>
          steps:
            - run:
                name: Find target workflow for << parameters.branch >> branch
                environment:
                  TARGET_BRANCH: << parameters.branch >>
                command: |
                  ./scripts/find-branch-workflow.sh > workflow
                  echo 'export TARGET_WORKFLOW="'$(cat workflow)'"' >> $BASH_ENV
      - run:
          name: Ensure TARGET_WORKFLOW is set
          command: |
            if [ "x$TARGET_WORKFLOW" = "x" ]; then
            echo "TARGET_WORKFLOW is empty"
            exit 1
            fi
      - run:
          name: Print TARGET_WORKFLOW
          command: echo $TARGET_WORKFLOW
  fetch-job-artifacts:
    description: Fetches a job's artifacts for a given workflow & job name
    parameters:
      workflow:
        type: string
        default: "$TARGET_WORKFLOW"
      job:
        type: string
      destination:
        type: string
        default: "target"
      filter:
        type: string
        default: ""
    steps:
      - run:
          name: Fetch artifacts for << parameters.job >>
          command: >
            ./scripts/circleci-fetch-artifacts.sh << parameters.workflow >>
            << parameters.job >> << parameters.destination >>
            << parameters.filter >>
  setup-metadata:
    description: Fetches metadata files and sets environment variables
    parameters:
      target:
        type: string
    steps:
      - fetch-job-artifacts:
          filter: "commit-date"
          job: build-<< parameters.target >>
      - fetch-job-artifacts:
          filter: "version"
          job: build-<< parameters.target >>
      - fetch-job-artifacts:
          filter: "build-number"
          job: build-<< parameters.target >>
      - fetch-job-artifacts:
          filter: "git-revision"
          job: build-<< parameters.target >>
      - fetch-job-artifacts:
          filter: "git-branch"
          job: build-<< parameters.target >>
      - setenv-from-file:
          variable-name: COMMIT_DATE
          path: target/commit-date
      - setenv-from-file:
          variable-name: SENSU_VERSION
          path: target/version
      - setenv-from-file:
          variable-name: BUILD_NUMBER
          path: target/build-number
      - setenv-from-file:
          variable-name: TARGET_REVISION
          path: target/git-revision
      - setenv-from-file:
          variable-name: TARGET_BRANCH
          path: target/git-branch
      - run:
          name: Set TARGET_BRANCH_NO_SLASHES
          command: >
            echo "export TARGET_BRANCH_NO_SLASHES=${TARGET_BRANCH//\//_}" >>
            $BASH_ENV
      - run:
          name: Set CIRCLE_BRANCH_NO_SLASHES
          command: >
            echo "export CIRCLE_BRANCH_NO_SLASHES=${CIRCLE_BRANCH//\//_}" >>
            $BASH_ENV
  extract-tarballs:
    description: Extracts all tarballs in a given directory
    parameters:
      working_directory:
        type: string
    steps:
      - run:
          name: Extract tarballs in << parameters.working_directory >>
          working_directory: << parameters.working_directory >>
          command: |
            find -type f -name '*.tar.gz' -exec echo "extracting: {}" \; -exec tar -zxf {} \;
  verify-binary:
    parameters:
      working_directory:
        type: string
      binary:
        type: string
    steps:
      - run:
          name: Verify file type of << parameters.working_directory >>/<< parameters.binary >>
          working_directory: << parameters.working_directory >>
          command: >
              if ! file << parameters.binary >> | grep executable; then
                file << parameters.binary >>
                cat << parameters.binary >>
              fi
      - when:
          condition:
            not:
              equal: ["<< parameters.working_directory >>", "target/linux/s390x"]
          steps:
            - run:
                name: Verify version of << parameters.working_directory >>/<< parameters.binary >>
                working_directory: << parameters.working_directory >>
                command: ./<< parameters.binary >> version
  unsupported-binary:
    parameters:
      working_directory:
        type: string
      binary:
        type: string
    steps:
      - run:
          name: Create unsupported binary << parameters.working_directory >>/<< parameters.binary >>
          working_directory: << parameters.working_directory >>
          command: >
            printf "#!/bin/sh\necho \"<< parameters.binary >> is not
            available for this platform\nexit 1\"\"" > << parameters.binary >>
      - run:
          name: Add execute bit to << parameters.working_directory >>/<< parameters.binary >>
          working_directory: << parameters.working_directory >>
          command: chmod a+x << parameters.binary >>
  verify-or-unsupported:
    parameters:
      working_directory:
        type: string
      binary:
        type: string
      supported:
        type: boolean
    steps:
      - when:
          condition: << parameters.supported >>
          steps:
            - verify-binary:
                working_directory: << parameters.working_directory >>
                binary: << parameters.binary >>
      - unless:
          condition: << parameters.supported >>
          steps:
            - unsupported-binary:
                working_directory: << parameters.working_directory >>
                binary: << parameters.binary >>
  fetch-licenses:
    steps:
      - fetch-job-artifacts:
          job: store-licenses
          destination: target/licenses
  fetch-and-verify-binaries:
    parameters:
      job:
        type: string
      target:
        type: string
      destination:
        type: string
      supports_agent:
        type: boolean
        default: true
      supports_backend:
        type: boolean
        default: false
      supports_cli:
        type: boolean
        default: true
    steps:
      - fetch-job-artifacts:
          filter: ".tar.gz"
          job: << parameters.job >>
          destination: << parameters.destination >>
      - extract-tarballs:
          working_directory: << parameters.destination >>
      - verify-or-unsupported:
          working_directory: << parameters.destination >>
          binary: sensu-agent
          supported: << parameters.supports_agent >>
      - verify-or-unsupported:
          working_directory: << parameters.destination >>
          binary: sensu-backend
          supported: << parameters.supports_backend >>
      - verify-or-unsupported:
          working_directory: << parameters.destination >>
          binary: sensuctl
          supported: << parameters.supports_cli >>
      - verify-binary:
          working_directory: << parameters.destination >>
          binary: sensu-agent
  docker-run-command:
    parameters:
      image:
        type: string
        default: "sensu/sensu-ci"
      tag:
        type: string
      command:
        type: string
    steps:
      - run: >
          docker run --rm << parameters.image >>:<< parameters.tag >>
          sh -c "<< parameters.command >>"

jobs:
  build-docker:
    executor:
      name: docker/machine
      image: "ubuntu-2004:202010-01"
      dlc: true
    parameters:
      platforms:
        type: string
      path:
        type: string
      image:
        type: string
        default: "sensu/sensu-ci"
      tag:
        type: string
    steps:
      - run:
          name: Login to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN --password-stdin
      - docker/build:
          image: << parameters.image >>
          tag: << parameters.tag >>
          path: << parameters.path >>
          extra_build_args: --label "version=$SENSU_VERSION" --label "release=$BUILD_NUMBER" --push --platform "<< parameters.platforms >>"

workflows:
  docker:
    jobs:
      - build-docker:
          name: build-alpine
          platforms: linux/386,linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7,linux/ppc64le,linux/s390x
          path: dockerfiles/alpine
          tag: "$TARGET_BRANCH_NO_SLASHES-$CIRCLE_BRANCH_NO_SLASHES-alpine,$TARGET_REVISION-alpine"
          pre-steps:
            - checkout
            - buildx/install:
                version: 0.5.1
            - create-target-directory
            - setenv-target-workflow
            - setup-metadata:
                target: linux_amd64
            - fetch-licenses
            - fetch-and-verify-binaries:
                job: build-linux_386
                target: linux_386
                destination: target/linux/386
            - fetch-and-verify-binaries:
                job: build-linux_amd64
                destination: target/linux/amd64
                target: linux_amd64
                supports_backend: true
            - fetch-and-verify-binaries:
                job: build-linux_arm64
                destination: target/linux/arm64
                target: linux_arm64
                supports_backend: true
            - fetch-and-verify-binaries:
                job: build-linux_arm_6
                destination: target/linux/arm/v6
                target: linux_arm_6
            - fetch-and-verify-binaries:
                job: build-linux_arm_7
                destination: target/linux/arm/v7
                target: linux_arm_7
            - fetch-and-verify-binaries:
                job: build-linux_ppc64le
                destination: target/linux/ppc64le
                target: linux_ppc64le
                supports_backend: true
            - fetch-and-verify-binaries:
                job: build-linux_s390x
                destination: target/linux/s390x
                target: linux_s390x
          post-steps:
            - docker-run-command:
                image: sensu/sensu-ci
                tag: "$TARGET_REVISION-alpine"
                command: sensu-agent version
            - docker-run-command:
                image: sensu/sensu-ci
                tag: "$TARGET_REVISION-alpine"
                command: sensu-backend version
            - docker-run-command:
                image: sensu/sensu-ci
                tag: "$TARGET_REVISION-alpine"
                command: sensuctl version
      - build-docker:
          name: build-rhel7
          platforms: linux/amd64
          path: dockerfiles/redhat7
          tag: "$TARGET_BRANCH_NO_SLASHES-$CIRCLE_BRANCH_NO_SLASHES-rhel7,$TARGET_REVISION-rhel7"
          pre-steps:
            - checkout
            - buildx/install
            - create-target-directory
            - setenv-target-workflow
            - setup-metadata:
                target: linux_amd64
            - fetch-licenses
            - fetch-and-verify-binaries:
                job: build-linux_amd64
                destination: target/linux/amd64
                target: linux_amd64
                supports_backend: true
          post-steps:
            - docker-run-command:
                image: sensu/sensu-ci
                tag: "$TARGET_REVISION-rhel7"
                command: sensu-agent version
            - docker-run-command:
                image: sensu/sensu-ci
                tag: "$TARGET_REVISION-rhel7"
                command: sensu-backend version
            - docker-run-command:
                image: sensu/sensu-ci
                tag: "$TARGET_REVISION-rhel7"
                command: sensuctl version
